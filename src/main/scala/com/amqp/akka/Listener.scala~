package com.amqp.akka

import akka.actor.{ActorRef, ActorSystem, Props}
import akka.routing.ConsistentHashingPool
import akka.routing.ConsistentHashingRouter.{ConsistentHashMapping, ConsistentHashable}

object Listener extends App{
  val system = ActorSystem("ListenerSystem")
  val listenerChannel = AMQP.getConnection.createChannel()
  val listenerQueue = listenerChannel.queueDeclare.getQueue
  listenerChannel.queueBind(listenerQueue,Defaults.EXCHANGE,"")

  case class Add(key:String,value:String)
  case class Remove(key:String)
  case class getKey(key:String) extends ConsistentHashable{
    override def consistentHashKey: Any = key
  }

  def hashMapping:ConsistentHashMapping={
    case Add(key,_) => key
    case getKey(key) => key
  }

//  val listener1 = system.actorOf(Props(new AMQP_Listener(listenerChannel,listenerQueue)),"listener1")
//  val listener2 = system.actorOf(Props(new AMQP_Listener(listenerChannel,listenerQueue)),"listener2")
//  val listener3 = system.actorOf(Props(new AMQP_Listener(listenerChannel,listenerQueue)),"listener3")
//  val listener4 = system.actorOf(Props(new AMQP_Listener(listenerChannel,listenerQueue)),"listener4")
//  val listener5 = system.actorOf(Props(new AMQP_Listener(listenerChannel,listenerQueue)),"listener5")
//  val listener6 = system.actorOf(Props(new AMQP_Listener(listenerChannel,listenerQueue)),"listener6")

//  val paths1:List[String] = List("/user/ListenerSystem/listener1","/user/ListenerSystem/listener2","/user/ListenerSystem/listener3")
//  val paths2:List[String] = List("/user/ListenerSystem/listener4","/user/ListenerSystem/listener5","/user/ListenerSystem/listener6")


  val router1:ActorRef = system.actorOf(ConsistentHashingPool(10,hashMapping=hashMapping).props(Props(new AMQP_Listener(listenerChannel,listenerQueue))),"r1")
  //val router2:ActorRef = system.actorOf(ConsistentHashingGroup(paths2).withHashMapper(hashMapper).props(),"r2")
}